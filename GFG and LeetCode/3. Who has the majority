# 3. Who has the majority?
## Easy
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an array arr[]&nbsp;of size N and&nbsp;two elements x and y, use counter variables to find which element appears most in the array, x or y.&nbsp;If both elements have the same frequency, then&nbsp;return the smaller element.<br>
<strong>Note:</strong>&nbsp; We need to return the element, not its&nbsp;count.</span></p>

<p>&nbsp;</p>

<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>

<pre><span style="font-size:18px"><strong>Input:
</strong>N = 11
arr[] = {1,1,2,2,3,3,4,4,4,4,5}
x = 4, y = 5
<strong>Output: </strong>4<strong>
Explanation: </strong>
frequency of 4 is 4.
frequency of 5 is 1.
</span></pre>

<p>&nbsp;</p>

<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>

<pre><span style="font-size:18px"><strong>Input:
</strong>N = 8
arr[] = {1,2,3,4,5,6,7,8}
x = 1, y = 7
<strong>Output: </strong>1<strong>
Explanation: 
</strong>frequency of 1 is 1.
frequency of 7 is 1.
Since 1 &lt; 7, return 1.</span>
</pre>

<p>&nbsp;</p>

<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Complete the function <strong>majorityWins()</strong> that takes<strong> array, n, x, y </strong>as input parameters<strong>&nbsp;</strong>and return the element with higher&nbsp;frequency.</span></p>

<p>&nbsp;</p>

<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>

<p>&nbsp;</p>

<p><strong><span style="font-size:18px">Constraints:</span></strong><br>
<span style="font-size:18px">1 &lt;= n &lt;= 10<sup>3</sup><br>
0 &lt;= arr<sub>i</sub> , x , y &lt;= 10<sup>8</sup></span></p>

<p>&nbsp;</p>
 <p></p>
            </div>